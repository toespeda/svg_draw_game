<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Test</title>
        <meta http-equiv="content-type" content="text/html; charset=utf-8" />
        <style>
            html, body {
                height:100%;
            }
            body {
                margin:0;
                padding: 10px;
                background-color: #eee;
            }
            #editor {
                float: left;
            }
            svg {
                background-color: #fff;
            }
            #layers {
                float: left;
            }
            #layers li {
                cursor: default;
            }
            #layers .remove {
                cursor: pointer;
                margin:0 5px;
            }
            #controllers {
                clear: left;
                padding: 10px 0;
            }
            #examples {
                float: right;
            }
            #examples svg {
                width: 80px;
                height: 80px;
            }
            #letters {
                /*display:grid;*/
                /*grid-auto-flow:column dense;*/
                /*grid-template-rows:50px 50px;*/
                /*grid-auto-columns:50px;*/
            }
            #letters > * {

                width: 32px;
                height: 32px;
                margin: 4px;
            }
            #result > * {
                display: inline-block;
                width: 32px;
                height: 32px;
                margin: 4px;
                border-bottom: 3px solid #000;
            }


        </style>
    </head>
    <body>


        
        <div id="editor" class="test">
            <svg xmlns="http://www.w3.org/2000/svg" width="358" height="358" viewBox="0 0 358 358">
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M246 176 L235 80"></path>
                <circle stroke="#000000" stroke-width="3" fill="transparent" cx="182" cy="124" r="36.235341863986875"></circle>
                <ellipse stroke="#000000" stroke-width="3" fill="transparent" cx="100" cy="132" rx="36" ry="52.5"></ellipse>
                <line stroke="#000000" stroke-width="3" x1="10" x2="50" y1="110" y2="150"></line>
            </svg>
        </div>



        <ol id="layers"></ol>




        <div id="examples">
            <svg xmlns="http://www.w3.org/2000/svg" width="358" height="358" viewBox="0 0 358 358">
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M246 176 L235 80"></path>
                <circle stroke="#000000" stroke-width="3" fill="transparent" cx="182" cy="124" r="36.235341863986875"></circle>
                <ellipse stroke="#000000" stroke-width="3" fill="transparent" cx="100" cy="132" rx="36" ry="52.5"></ellipse>
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="358" height="358" viewBox="0 0 358 358">
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M152 50 L84 121" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M152 50 L236 110" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M84 121 L128 124" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M128 124 L70 177" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M185 121 L244 165" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M192 185 L244 165" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M44 280 L126 183" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M280 270 L189 184" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M280 270 L187 288" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M236 110 L185 121" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M126 183 L70 177" opacity="1"></path>
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M44 280 L134 291" opacity="1"></path>
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="358" height="358" viewBox="0 0 358 358">
                <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M246 176 L235 80, 265 80, 235 40 C235 80, 225 80, 225 80"></path>
            </svg>
        </div>
        <div id="controllers">
            <button id="reverse">Reverse</button>
            <button id="play">Play</button>
        </div>




        <div id="result"></div>

        <div id="letters"></div>

        <script type="application/javascript" src="SVGDraw.js"></script>
        <script type="application/javascript" src="Sortable.js"></script>
        
        <script>

            let svg = document.querySelector("#editor svg");

            let Draw = new SVGDraw(svg);

            let layers = document.querySelector("#layers");

            document.addEventListener("keyup", (e) => {

                if (e.key === "1") {
                    Draw.type = "line";
                }
                if (e.key === "2") {
                    Draw.type = "circle";
                }
                if (e.key === "3") {
                    Draw.type = "ellipse";
                }
                if (e.key === "4") {
                    Draw.type = "path";
                }
                if (e.key === "l") {
                    Draw.draw = 1;
                }
                if (e.key === "m") {
                    Draw.draw = 0;
                }
                // if (e.key === "Delete") {
                //     console.log(Shape);
                // }
            });

            Sortable(layers);

            layers.addEventListener("sorted", (e) => {
                //Rearrange shapes
                Draw.moveShape(e.detail.startIndex, e.detail.endIndex);
            }, false);

            layers.addEventListener("removed", (e) => {
                //Rearrange shapes
                Draw.removeShape(e.detail.index);

            }, false);

            svg.addEventListener("added", (e) => {
                let b = document.createElement('li');
                b.innerHTML = e.detail.type + '<span class="remove">x</span>';
                layers.appendChild(b);
            }, false);

            document.querySelector("#reverse").addEventListener("click", e => {
                e.preventDefault();
                Draw.reverseOrder();
                for (var i = 1; i < layers.childNodes.length; i++){
                    layers.insertBefore(layers.childNodes[i], layers.firstChild);
                }
            });

            document.querySelector("#play").addEventListener("click", e => {
                e.preventDefault();
                let shapes = [...svg.children];
                [...layers.children].forEach(el => {
                    el.style.fontWeight = "";
                });
                let play = e.target;
                if (play.innerText==="Stop") {
                    play.innerText = "Play";
                    shapes.forEach(el=>{
                        el.setAttribute("opacity","1");
                    });
                    play.nextSibling.remove();
                    [...layers.children].forEach(el => {
                        el.style.fontWeight = "";
                    });
                } else {
                    play.innerText = "Stop";
                    shapes.forEach(el=>{
                        el.setAttribute("opacity",".3");
                    });
                    let i = 0;
                    let next = document.createElement("button");
                    next.innerText = "Next";
                    play.parentNode.insertBefore(next, play.nextSibling);
                    next.addEventListener("click", e => {
                        shapes[i].setAttribute("opacity","1");
                        layers.children[i].style.fontWeight = "bold";
                        if (!shapes[++i]) {
                            next.remove();
                            play.innerText = "Play";
                        }
                    });
                }
            });

            Draw.addShapes();

            let examples = document.querySelector("#examples");

            examples.addEventListener("click", e => {
                if (e.target.nodeName === "svg") {
                    layers.innerHTML = "";
                    Draw.addShapes(e.target.innerHTML);
                }
            });

            layers.addEventListener("mouseover", (e) => {
                let shape = Draw.getShapeByIndex([...layers.childNodes].indexOf(e.target));
                if (shape) {
                    shape.el.setAttribute("stroke", "#ff0000")
                }
            });

            layers.addEventListener("mouseout", (e) => {
                let shape = Draw.getShapeByIndex([...layers.childNodes].indexOf(e.target));
                if (shape) {
                    shape.el.setAttribute("stroke", "#000000")
                }
            });









            let letters = document.querySelector("#letters");

            let alpha = [...'abcdefghijklmnopqrstuvwxyz'];

            let word = "test";



            let result = document.querySelector("#result");

            [...word].forEach(b => {
                let box = document.createElement("span");
                result.appendChild(box);
            });

            for (var i in alpha) {
                if (+i === Math.floor(alpha.length/2)) {
                    letters.appendChild(document.createElement("br"));
                }
                let e = document.createElement("button");
                e.textContent = alpha[i];
                letters.appendChild(e);
            }

            letters.addEventListener("click", e => {
                let l = e.target.textContent;
                let r = new RegExp(l,"gi");
                let match = [];
                let matches = [];
                while ((match = r.exec(word)) !== null) {
                    matches.push(match);
                };
                console.log("matches", matches);
            });


        </script>
        
    </body>
</html>