<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Test</title>
        <meta http-equiv="content-type" content="text/html; charset=utf-8" />
        <style>
            html, body {
                height:100%;
            }
            body {
                background-color: #eee;
                padding: 0;
                margin: 0;
            }
            #editor {

            }
            .col {
                padding: 10px;
                float: left;
            }
            .row {
                clear: left;
            }
            svg {
                background-color: #fff;
            }
            #layers {
                margin: 0;
                padding: 5px 0 10px 15px;
            }
            #layers li {
                cursor: default;
            }
            #layers li:last-child .merge {
                /*display: none;*/
            }
            #layers span {
                cursor: pointer;
                margin:0 5px;
            }
            #layers .error, #layers .success {
                display: inline-block;
                border-radius: 50%;
                border: 2px solid red;
                vertical-align: middle;
                width: 8px;
                height: 8px;
            }

            #layers .error:before, #layers .success:before {
                content: "";
                display: inline-block;
                position: absolute;
                transform: translate(-50%, -50%) rotate(-45deg);
                height: 2px;
                width: 2px;
                margin: 4px 0 0 4px;
            }

            #layers .success {
                border: 2px solid green;
            }

            #layers .error.visible:before {
                background-color: red;
            }

            #layers .error.hidden:before, #layers .success.hidden:before {
                height: 1px;
                width: 8px;
            }

            #layers .success.visible:before {
                background-color: green;
            }

            #examples {
                float: right;
            }
            #examples svg {
                width: 80px;
                height: 80px;
            }
            #letters {
                /*display:grid;*/
                /*grid-auto-flow:column dense;*/
                /*grid-template-rows:50px 50px;*/
                /*grid-auto-columns:50px;*/
            }
            #letters > * {
                width: 32px;
                height: 32px;
                margin: 4px;
                box-shadow: 2px 2px 1px #000;
            }
            #letters > *.picked {
                border-color: transparent;
                background-color: transparent;
                box-shadow:none;
            }
            #result {
                margin:0 0 30px 0;
            }
            #result > * {
                display: inline-block;
                width: 32px;
                height: 32px;
                margin: 4px;
                border-bottom: 3px solid transparent;
                font-size: 20px;
                text-align: center;
                vertical-align: middle;
            }
            #result > *.empty {
                border-bottom-color: #000;
            }
            #tools {

            }
            #tools ul {
                background-color: #ddd;
                padding: 5px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
                list-style: none;
                margin: 0;
            }
            #tools ul li {
                display: inline-block;
                position: relative;
                background-color: #ddd;
            }
            #tools ul li ul {
                display: none;
                position: absolute;
                left: -5px;
                border-bottom-left-radius: 5px;
                border-bottom-right-radius: 5px;
            }
            #tools ul li:hover ul {
                display: block;
            }
            #tools:after {
                clear: both;
                content: "";
                display: table;
            }
            #tools ul li > *:first-child {
                padding: 5px;
                border: 1px solid transparent;
                border-radius: 5px;
            }
            #tools ul li > *:first-child:hover {
                background-color: #eee;
                border-color: #ccc;
            }
            #tools ul li > *:first-child.active {
                box-shadow: 2px 2px 1px #000;
                background-color: #fff;
            }
            #tools > {
                display: inline-block;
            }

            #tools svg {
                background-color: transparent;
            }
            svg use {
                pointer-events: none;
            }
            #symbols {
                display: none;
            }

            svg.editing > * {
                opacity: 1;
            }

            svg.editing > *:hover {
                stroke: #0000ff;
            }

            svg.editing .visible-on-error {

                stroke: red;
            }

            svg.editing .visible-on-success {

                stroke: green;
            }

            svg.editing .hidden-on-error {
                stroke-dasharray: 5,5;
                stroke: red;
            }

            svg.editing .hidden-on-success {
                stroke-dasharray: 5,5;
                stroke: green;
            }


            svg.playing > * {
                opacity: .3;
            }

            svg.playing .show {
                opacity: 1;
            }

            svg.playing .visible-on-error, svg.playing .visible-on-success, svg.error .hidden-on-error, svg.success .hidden-on-success {
                opacity: 0;
            }

            svg.error .visible-on-error, svg.success .visible-on-success {
                opacity: 1;
            }








        </style>
    </head>
    <body>

        <div class="row">

            <div class="test col">

                <div id="tools">

                    <ul>
                        <li><img data-action="move" src="symbols/pointer.svg" /></li>
                        <li><img data-action="resize" src="symbols/resize.svg" /></li>
                        <li><img data-action="draw" data-type="line" src="symbols/line.svg" /></li>
                        <li><img data-action="draw" data-type="circle" src="symbols/circle.svg" /></li>
                        <li><img data-action="draw" data-type="ellipse" src="symbols/ellipse.svg" /></li>
                        <li>
                            <svg width="24" height="24" version="2.0" data-type="symbol"><use href="#star" /></svg>
                            <ul>
                                <li><svg width="24" height="24" version="2.0" data-type="symbol"><use href="#star" /></svg></li>
                                <li><svg width="24" height="24" version="2.0" data-type="symbol"><use href="#star2" /></svg></li>
                                <li><svg width="24" height="24" version="2.0" data-type="symbol"><use href="#glow" /></svg></li>
                                <li><svg width="24" height="24" version="2.0" data-type="symbol"><use href="#sun" /></svg></li>
                            </ul>

                    </ul>

                </div>

                <svg class="editing" id="editor" xmlns="http://www.w3.org/2000/svg" width="358" height="358" viewBox="0 0 358 358">

                    <path stroke="#000000" stroke-width="3" fill="transparent" stroke-linejoin="round" d="M246 176 L235 80"></path>
                    <circle stroke="#000000" stroke-width="3" fill="transparent" cx="182" cy="124" r="36.235341863986875"></circle>
                    <ellipse stroke="#000000" stroke-width="3" fill="transparent" cx="100" cy="132" rx="36" ry="52.5"></ellipse>

<!--                    <ellipse stroke="#000000" stroke-width="3" fill="transparent" cx="100" cy="132" rx="36" ry="52.5"></ellipse>-->

<!--                    <path stroke="#000000" stroke-width="3" fill="transparent" stroke-linejoin="round" d="M 168,148.8000030517578 M 214.2276973253049,148.8000030517578 A 46.22769732530488,46.22769732530488,0,1,0,121.77230267469511,148.8000030517578 A 46.22769732530488,46.22769732530488,0,1,0,214.2276973253049,148.8000030517578"></path>-->

                    <!--<path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M152 50 L84 121" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M152 50 L236 110" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M84 121 L128 124" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M128 124 L70 177" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M185 121 L244 165" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M192 185 L244 165" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M44 280 L126 183" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M280 270 L189 184" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M280 270 L187 288" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M236 110 L185 121" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M126 183 L70 177" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M44 280 L134 291" opacity="1"></path>-->

                    <!--<path stroke="#000000" stroke-width="3" fill="transparent" d="
                        M 93.11,36.46
                        C 92.79,35.45 91.94,34.72 90.94,34.61
                        L 61.53,31.46 49.6,2.911
                        C 49.19,1.943 48.28,1.308 47.27,1.308 46.26,1.308 45.35,1.937 44.94,2.916
                        L 33.01,31.46 3.6,34.61
                        C 2.597,34.72 1.746,35.45 1.436,36.46 1.122,37.47 1.407,38.59 2.161,39.3
                        L 24.2,60.1 17.95,90.59
                        C 17.74,91.63 18.13,92.71 18.94,93.33 19.39,93.68 19.91,93.85 20.44,93.85 20.88,93.85 21.32,93.73 21.72,93.48
                        L 47.27,77.78 72.82,93.48
                        C 73.69,94.01 74.78,93.96 75.6,93.32 76.41,92.71 76.8,91.62 76.59,90.58
                        L 70.34,60.08 92.38,39.28
                        C 93.13,38.58 93.42,37.47 93.11,36.46
                        Z "/>-->

                </svg>
            </div>

            <div class="col">
                <ol id="layers"></ol>
                <button id="reverse">Reverse</button>
                <button id="test">Step</button>
            </div>

            <div id="examples" class="col">
                <svg xmlns="http://www.w3.org/2000/svg" width="358" height="358" viewBox="0 0 358 358">
                    <path stroke="#000000" stroke-width="3" fill="transparent" stroke-linejoin="round" d="M246 176 L235 80"></path>
                    <circle stroke="#000000" stroke-width="3" fill="transparent" cx="182" cy="124" r="36.235341863986875"></circle>
                    <ellipse stroke="#000000" stroke-width="3" fill="transparent" cx="100" cy="132" rx="36" ry="52.5"></ellipse>
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" width="358" height="358" viewBox="0 0 358 358">
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M152 50 L84 121" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M152 50 L236 110" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M84 121 L128 124" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M128 124 L70 177" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M185 121 L244 165" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M192 185 L244 165" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M44 280 L126 183" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M280 270 L189 184" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M280 270 L187 288" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M236 110 L185 121" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M126 183 L70 177" opacity="1"></path>
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M44 280 L134 291" opacity="1"></path>
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" width="358" height="358" viewBox="0 0 358 358">
                    <path stroke="#000000" stroke-width="3" fill="none" stroke-linejoin="round" d="M246 176 L235 80, 265 80, 235 40 C235 80, 225 80, 225 80"></path>
                </svg>
            </div>

        </div>

        <div class="row">

            <div class="col">

<!--                <div id="controllers">-->
<!--                    -->
<!--                </div>-->

                <button id="play">Play</button>

                <div id="result"></div>

                <div id="letters"></div>

            </div>

        </div>

        <svg id="symbols" width="24" height="24" viewBox="0 0 24 24" version="2" xmlns="http://www.w3.org/2000/svg">
            <symbol id="star" viewbox="0 0 24 24">
                <path
                    d="M 21.26,9.83 C 21.19,9.627 21.02,9.479 20.82,9.457 L 14.88,8.821 12.47,3.056 C 12.39,2.86 12.2,2.732 12,2.732 11.8,2.732 11.61,2.859 11.52,3.057 L 9.12,8.821 3.181,9.457 C 2.978,9.479 2.806,9.627 2.744,9.83 2.68,10.03 2.738,10.26 2.89,10.4 L 7.341,14.6 6.079,20.77 C 6.037,20.97 6.116,21.18 6.279,21.32 6.369,21.39 6.474,21.42 6.582,21.42 6.671,21.42 6.759,21.39 6.84,21.35 L 12,18.18 17.16,21.35 C 17.33,21.45 17.55,21.44 17.72,21.31 17.88,21.18 17.96,20.97 17.91,20.77 L 16.66,14.6 21.11,10.4 C 21.26,10.26 21.32,10.03 21.26,9.83 Z"
                    fill="transparent"
                    stroke="#000000"
                    stroke-width="2"
                />
            </symbol>
            <symbol id="star2" viewbox="0 0 24 24">
                <path
                        d="M 11.71,3.448 C 11.71,3.448 12.49,7.691 13.92,9.136 15.38,10.61 17.81,10.68 19.7,11.44 17.77,12.4 15.6,12.45 14.18,13.87 12.74,15.3 12.41,17.69 11.71,19.43 10.87,17.09 10.66,15.35 9.259,13.91 7.911,12.53 4.027,11.44 4.027,11.44 5.973,10.78 8.027,10.54 9.389,9.157 10.83,7.692 11.71,3.448 11.71,3.448 Z"
                        fill="transparent"
                        stroke="#000000"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="1.5"

                        />
            </symbol>
            <symbol id="glow" viewbox="0 0 24 24">
                <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M 12.9,2.674V 5.43C 12.9,6.481 11.26,6.415 11.26,5.43V 2.674C 11.26,1.527 12.9,1.483 12.9,2.674ZM 18.97,5.981 17.04,7.91C 16.36,8.605 15.24,7.51 15.93,6.808L 17.86,4.878C 18.63,4.132 19.66,5.299 18.97,5.981ZM 6.291,4.878 8.221,6.808C 8.912,7.502 7.814,8.603 7.118,7.91L 5.189,5.981C 4.418,5.21 5.703,4.29 6.291,4.878ZM 2.984,10.95H 5.74C 6.836,10.95 6.836,12.59 5.74,12.59H 2.984C 1.889,12.59 1.889,10.95 2.984,10.95ZM 18.42,10.95H 21.17C 22.32,10.95 22.32,12.59 21.17,12.59H 18.42C 17.27,12.59 17.27,10.95 18.42,10.95ZM 8.221,17 6.291,18.93C 5.571,19.69 4.34,18.41 5.189,17.55L 7.118,15.62C 7.889,14.87 9.054,16.18 8.221,17ZM 17.04,15.62 18.97,17.55C 19.84,18.44 18.59,19.66 17.86,18.93L 15.93,17C 15.07,16.12 16.32,14.9 17.04,15.62ZM 12.9,18.11V 20.86C 12.9,21.98 11.26,21.94 11.26,20.86V 18.11C 11.26,16.94 12.9,16.88 12.9,18.11Z"
                        fill="#000"

                        stroke="none"
                        />
            </symbol>

            <symbol id="sun" viewbox="0 0 24 24">
                <path
                        d="M 4.91,18.03 6,17C 6.602,16.7 7.309,17.35 7,18L 6,19.09C 5.258,19.8 4.227,18.71 4.91,18.03ZM 17,6 18,4.91C 18.68,4.211 19.82,5.25 19.09,6L 18,7C 17.35,7.718 16.4,6.685 17,6ZM 18.03,19.09 17,18C 16.7,17.37 17.37,16.7 18,17L 19.09,18C 19.77,18.68 18.73,19.79 18.03,19.09ZM 6,7 4.91,6C 4.199,5.289 5.287,4.197 6,4.91L 7,6C 7.611,6.679 6.636,7.721 6,7ZM 4.25,12.75H 2.75C 1.77,12.75 1.77,11.25 2.75,11.25H 4.25C 5.23,11.25 5.23,12.75 4.25,12.75ZM 21.25,12.75H 19.75C 18.77,12.75 18.77,11.25 19.75,11.25H 21.25C 22.23,11.25 22.23,12.75 21.25,12.75ZM 11.25,21.25V 19.75C 11.25,18.77 12.75,18.77 12.75,19.75V 21.25C 12.75,22.23 11.25,22.23 11.25,21.25ZM 11.25,4.25V 2.75C 11.25,1.77 12.75,1.77 12.75,2.75V 4.25C 12.75,5.225 11.25,5.225 11.25,4.25ZM 12,17.75C 9.73,17.75 6.418,15.93 6.423,12.06 6.428,7.982 9.647,6.255 11.98,6.255 14.53,6.255 17.77,7.941 17.75,12 17.73,15.16 15.16,17.75 12,17.75ZM 11.98,7.772C 9.831,7.772 7.965,9.583 7.965,12.1 7.965,14.15 9.568,16.24 12.01,16.24 14.85,16.24 16.25,13.99 16.25,12 16.25,9.681 14.34,7.772 11.98,7.772Z"
                        fill="#000"
                        stroke="#000000"
                        stroke-width="0.5"
                />
            </symbol>

        </svg>

        <script type="application/javascript" src="SVGDraw.js"></script>
        <script type="application/javascript" src="Sortable.js"></script>
        
        <script>

            let svg = document.querySelector("#editor");

            let Draw = new SVGDraw(svg);

            let layers = document.querySelector("#layers");

            let tools = document.querySelector("#tools");

            let symbols = document.querySelector("#symbols");

            let setTools = function(data){
                for (var i in data) {
                    let buttons = document.querySelectorAll("#tools > ul> li > *");
                    buttons.forEach(el => {
                        el.classList.remove("active");
                    });
                    buttons.forEach(el => {
                        el.classList[el.dataset[i] === data[i] ? "add" : "remove"]("active");
                    });
                }
            };

            svg.addEventListener("action", (e) => {
                setTools({
                    action:e.detail
                });
            }, false);

            tools.addEventListener("click", (e) => {

                let data = e.target.dataset;

                if (data.type === "symbol") {

                    let id = e.target.querySelector("use").getAttribute("href");
                    let symbol = symbols.querySelector(id);
                    [...symbol.children].forEach(el => {
                        Draw.addShape(svg.appendChild(el.cloneNode()));
                    });
                    setTools(data);

                } else {
                    Draw.set(data);
                    setTools(data);
                }
            });

            document.addEventListener("keyup", (e) => {

                if (e.key === "1") {
                    Draw.type = "line";
                }
                if (e.key === "2") {
                    Draw.type = "circle";
                }
                if (e.key === "3") {
                    Draw.type = "ellipse";
                }
                if (e.key === "4") {
                    Draw.type = "path";
                }
                if (e.key === "l") {
                    Draw.draw = 1;
                }
                if (e.key === "m") {
                    Draw.draw = 0;
                }
                // if (e.key === "Delete") {
                //     console.log(Shape);
                // }
            });

            let toggleVisibility = (tkl, index, status) => {

                let scl = [...svg.children][index].classList;

                if (scl.contains("visible-on-"+status)) {
                    scl.remove("visible-on-"+status);
                    scl.add("hidden-on-"+status);
                    tkl.add("hidden");
                } else if (scl.contains("hidden-on-"+status)) {
                    scl.remove("hidden-on-"+status);
                    tkl.remove(...["hidden", "visible"]);
                } else {
                    scl.add("visible-on-"+status);
                    tkl.add("visible");
                }

            };

            layers.addEventListener("mousedown", (e) => {
                if (e.target.nodeName.toLowerCase() === "span") {
                    let elements = [...layers.children];
                    let index = elements.indexOf(e.target.parentNode);

                    let tkl = e.target.classList;

                    if (tkl.contains("remove")) {
                        Draw.removeShape(index);
                        e.target.parentNode.remove();
                    } else if (tkl.contains("merge")) {
                        if (Draw.mergeShape(index, 1)) {
                            e.target.parentNode.nextElementSibling.remove();
                        }
                    } else if (tkl.contains("visibility")) {
                        e.target.innerText = e.target.innerText === "o" ? "ø" : "o";
                        [...svg.children][index].classList[e.target.innerText === "o"  ? "remove" : "add"]("hidden");
                    } else if (tkl.contains("error")) {
                        toggleVisibility(tkl, index, "error");
                    } else if (tkl.contains("success")) {
                        toggleVisibility(tkl, index, "success");
                    }
                }
            });

            Sortable(layers);

            layers.addEventListener("sorted", (e) => {
                //Rearrange shapes
                Draw.moveShape(e.detail.startIndex, e.detail.endIndex);
            }, false);

            svg.addEventListener("added", (e) => {
                let b = document.createElement('li');
                b.classList.add(e.detail.type);
                b.innerHTML = e.detail.type + ' <span class="remove">x</span> <span class="merge">v</span> <span class="error"></span> <span class="success"></span>';
                layers.appendChild(b);
            }, false);

            document.querySelector("#reverse").addEventListener("click", e => {
                e.preventDefault();
                Draw.reverseOrder();
                for (var i = 1; i < layers.childNodes.length; i++){
                    layers.insertBefore(layers.childNodes[i], layers.firstChild);
                }
            });

            document.querySelector("#test").addEventListener("click", e => {
                e.preventDefault();

                let shapes = [...svg.querySelectorAll("*:not(.visible-on-error,.visible-on-success)")];

                [...layers.children].forEach(el => {
                    el.style.fontWeight = "";
                });

                let test = e.target;

                let stop = () => {
                    svg.classList.remove("playing");
                    test.innerText = "Step";
                    shapes.forEach(el=>{
                        el.classList.remove("show");
                    });
                    test.nextSibling.remove();
                    [...layers.children].forEach(el => {
                        el.style.fontWeight = "";
                    });
                };

                if (test.innerText==="Stop") {

                    stop();

                } else {

                    svg.classList.add("playing");

                    test.innerText = "Stop";
                    let i = 0;
                    let next = document.createElement("button");
                    next.innerText = "Next";
                    test.parentNode.insertBefore(next, test.nextSibling);

                    next.addEventListener("click", e => {

                        if (!shapes[i]) {

                            svg.classList.add("error");

                            setTimeout(function(){
                                stop();
                            },2000)


                        } else {

                            shapes[i].classList.add("show");
                            layers.children[[...svg.children].indexOf(shapes[i])].style.fontWeight = "bold";
                            i++;

                        }

                    });
                }
            });

            Draw.addShapes();

            let examples = document.querySelector("#examples");

            examples.addEventListener("click", e => {
                if (e.target.nodeName === "svg") {
                    layers.innerHTML = "";
                    Draw.addShapes(e.target.innerHTML);

                }
            });

            layers.addEventListener("mouseover", (e) => {
                let shape = Draw.getShapeByIndex([...layers.childNodes].indexOf(e.target));
                if (shape) {
                    shape.el.style.stroke = "#0000ff";
                }
            });

            layers.addEventListener("mouseout", (e) => {
                let shape = Draw.getShapeByIndex([...layers.childNodes].indexOf(e.target));
                if (shape) {
                    shape.el.style.stroke = "";
                }
            });

            //Create letters

            let letters = document.querySelector("#letters");

            let alpha = [...'abcdefghijklmnopqrstuvwxyz'];

            for (let i in alpha) {
                if (+i === Math.floor(alpha.length/2)) {
                    letters.appendChild(document.createElement("br"));
                }
                let e = document.createElement("button");
                e.textContent = alpha[i];
                letters.appendChild(e);
            }

            //Create word boxes
            let word = "test";

            let result = document.querySelector("#result");

            [...word].forEach(b => {
                let box = document.createElement("span");
                box.classList.add("empty");
                result.appendChild(box);
            });

            document.querySelector("#play").addEventListener("click", e => {

                e.preventDefault();
                let playButton = e.target;
                let shapes = [...svg.querySelectorAll("*:not(.visible-on-error,.visible-on-success)")];
                let index = 0;

                let playing = e => {
                    let target = e.target;
                    if (target.classList.contains("picked")) {
                        return;
                    }
                    target.classList.add("picked");
                    let l = target.textContent;
                    let r = new RegExp(l,"gi");
                    let match = [];
                    let matches = [];
                    while ((match = r.exec(word)) !== null) {
                        matches.push(match);
                    }
                    if (matches.length) {
                        matches.forEach(m => {
                            let ok = result.children[m.index];
                            ok.textContent = l;
                            ok.classList.remove("empty");
                            if (!result.querySelectorAll(".empty").length) {
                                stop("success");
                            }
                        });
                    } else {
                        shapes[index].classList.add("show");
                        if (!shapes[++index]) {
                            stop("error");
                        }
                    }
                };

                let play = () => {
                    index = 0;
                    svg.classList.remove("editing", "success", "error");
                    svg.classList.add("playing");
                    playButton.innerText="Stop";
                    [...result.children].forEach(el=>{
                        el.textContent = "";
                        el.classList.add("empty");
                    });
                    letters.querySelectorAll(".picked").forEach(el => {
                        el.classList.remove("picked");
                    });
                    shapes.forEach(el=>{
                        el.classList.remove("show");
                    });
                    letters.addEventListener("click", playing);
                };

                let stop = (status) => {
                    svg.classList.remove("playing");
                    svg.classList.add(status);
                    playButton.innerText="Play";
                    letters.removeEventListener("click", playing);

                };

                if (playButton.innerText==="Stop") {
                    stop();
                } else {
                    play();
                }


            });


        </script>




        
    </body>
</html>